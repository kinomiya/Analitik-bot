import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
BACK_TO_CATEGORIES = "back_to_categories"
BACK_TO_BRANDS = "back_to_brands"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞
GAMING_GENRES = {
    "shooter": "–®—É—Ç–µ—Ä—ã (CS:GO, Valorant, Call of Duty)",
    "moba": "MOBA (Dota 2, League of Legends)",
    "strategy": "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ (StarCraft, Age of Empires)",
    "rpg": "RPG (MMORPG, Action RPG)"
}

HAND_SIZES = {
    "small": "–ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–ª–∏–Ω–∞ < 17 —Å–º)",
    "medium": "–°—Ä–µ–¥–Ω—è—è (17-19 —Å–º)",
    "large": "–ë–æ–ª—å—à–∞—è (> 19 —Å–º)"
}

SWITCH_TYPES = {
    "linear": "–õ–∏–Ω–µ–π–Ω—ã–µ (–∫—Ä–∞—Å–Ω—ã–µ, –±—ã—Å—Ç—Ä—ã–µ –∏ –ø–ª–∞–≤–Ω—ã–µ)",
    "tactile": "–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ (–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ, —Å –æ—Ç–∫–ª–∏–∫–æ–º)",
    "clicky": "–ö–ª–∏–∫–∞—é—â–∏–µ (—Å–∏–Ω–∏–µ, —Å —â–µ–ª—á–∫–æ–º)"
}

GAMING_SETUP_ADVICE = {
    "shooter": {
        "mouse": "–í—ã—Å–æ–∫–∏–π DPI (16000+) –∏ –ª–µ–≥–∫–∏–π –∫–æ—Ä–ø—É—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π",
        "keyboard": "–ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ (–æ–ø—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —Å–µ—Ä–µ–±—Ä—è–Ω—ã–µ) –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞",
        "headphones": "7.1 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π surround –∑–≤—É–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–≥–æ–≤",
        "meme": "–ë—É–¥–µ—à—å –∫—Ä—É—Ç–∏—Ç—å—Å—è –∫–∞–∫ —é–ª–∞ –∏ —Å–ª—ã—à–∞—Ç—å –≤—Ä–∞–≥–æ–≤ —á–µ—Ä–µ–∑ —Ç—Ä–∏ —Å—Ç–µ–Ω—ã!"
    },
    "moba": {
        "mouse": "–¢–æ—á–Ω—ã–π —Å–µ–Ω—Å–æ—Ä —Å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º –¥–ª—è –¥–æ–ª–≥–∏—Ö —Å–µ—Å—Å–∏–π",
        "keyboard": "–¢–∞–∫—Ç–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥",
        "headphones": "–ß–µ—Ç–∫–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Å–ª—ã—à–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥",
        "meme": "–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ —Ñ—Ä–µ–Ω–¥–ª–∏-—Ñ–∞–µ—Ä—ã –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å!"
    },
    "strategy": {
        "mouse": "–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–∞—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Ä–æ—Å–æ–≤",
        "keyboard": "–£–¥–æ–±–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Ç–∫–ª–∏–∫–æ–º –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è",
        "headphones": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –¥–ª—è –¥–æ–ª–≥–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π",
        "meme": "–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –∞–ø–º—ã –±—É–¥—É—Ç —Ç–∞–∫–∏–º–∏ –∂–µ –±—ã—Å—Ç—Ä—ã–º–∏, –∫–∞–∫ —É –ö–æ—Ä–µ–π—Å–∫–∏—Ö –ø—Ä–æ-–∏–≥—Ä–æ–∫–æ–≤!"
    },
    "rpg": {
        "mouse": "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–∞–∫—Ä–æ—Å–æ–≤",
        "keyboard": "–£–¥–æ–±–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –¥–ª—è –¥–æ–ª–≥–∏—Ö –Ω–∞–∂–∞—Ç–∏–π",
        "headphones": "–ò–º–º–µ—Ä—Å–∏–≤–Ω—ã–π –∑–≤—É–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –±–∞—Å–∞–º–∏",
        "meme": "–¢–µ–ø–µ—Ä—å —Ç—ã —Å–º–æ–∂–µ—à—å –≥—Ä–æ–º–∏—Ç—å –±–æ—Å—Å–æ–≤ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏!"
    }
}


def load_tech_data():
    try:
        with open('tech_data.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ tech_data.json")
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


async def send_photo_with_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   photo_url: str, text: str, message_to_edit=None):
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_url,
            caption=text,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        if message_to_edit:
            await message_to_edit.edit_text("üñº " + text, parse_mode="HTML")
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üñº " + text,
                parse_mode="HTML"
            )
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã", callback_data="category_keyboards")],
        [InlineKeyboardButton("üñ± –ú—ã—à–∫–∏", callback_data="category_mice")],
        [InlineKeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏", callback_data="category_headphones")],
        [InlineKeyboardButton("üåü –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton("üéÆ –°–æ–±—Ä–∞—Ç—å –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–µ—Ç–∞–ø", callback_data="gaming_setup_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("üñ• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("üñ• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏:", reply_markup=reply_markup)


async def ask_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéÆ –î–ª—è –∏–≥—Ä", callback_data="pref_gaming")],
        [InlineKeyboardButton("üíº –î–ª—è —Ä–∞–±–æ—Ç—ã", callback_data="pref_work")],
        [InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="pref_budget")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìù –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        "1. –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?",
        reply_markup=reply_markup
    )


async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == BACK_TO_CATEGORIES:
        return await start(update, context)

    category = query.data.split('_')[1]
    context.user_data['current_category'] = category

    brands = ["Razer", "Logitech", "HyperX", "SteelSeries", "Asus", "Lunacy"]
    buttons = [
        [InlineKeyboardButton(brand, callback_data=f"brand_{category}_{brand}")]
        for brand in brands
    ]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=BACK_TO_CATEGORIES)])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(f"üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=reply_markup)


async def handle_brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == BACK_TO_BRANDS:
        category = context.user_data.get('current_category', 'keyboards')
        return await handle_category(update, context)

    _, category, brand = query.data.split('_')
    context.user_data['current_brand'] = brand
    data = load_tech_data()

    if not data:
        await query.edit_message_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if category not in data:
        await query.edit_message_text(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if brand not in data[category]:
        await query.edit_message_text(f"‚ö†Ô∏è –ë—Ä–µ–Ω–¥ '{brand}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        return

    models = list(data[category][brand].keys())
    if not models:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand}'")
        return

    buttons = [
        [InlineKeyboardButton(model, callback_data=f"model_{category}_{brand}_{model}")]
        for model in models
    ]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=BACK_TO_BRANDS)])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(f"üìã –ú–æ–¥–µ–ª–∏ {brand}:", reply_markup=reply_markup)


async def handle_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, category, brand, model = query.data.split('_')
    data = load_tech_data()

    try:
        if not data or category not in data or brand not in data[category] or model not in data[category][brand]:
            raise KeyError("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        product = data[category][brand][model]

        if 'description' not in product or 'specs' not in product or 'price' not in product:
            raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ")

        specs = "\n".join([f"‚Ä¢ {key}: {value}" for key, value in product.get('specs', {}).items()])

        message = (
            f"üîπ <b>{model}</b> ({brand})\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description']}\n\n"
            f"‚öôÔ∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n{specs}\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']}"
        )

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=BACK_TO_BRANDS)],
            [InlineKeyboardButton("üåü –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"similar_{category}_{brand}_{model}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if product.get('photo_url'):
            try:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=product['photo_url'],
                    caption=message,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await query.edit_message_text(
                    "üñº " + message,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
        else:
            await query.edit_message_text(
                message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        error_msg = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        )
        await query.edit_message_text(error_msg)


async def handle_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pref = query.data.split('_')[1]
    context.user_data['preferences'] = {'usage': pref}

    keyboard = [
        [InlineKeyboardButton("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã", callback_data="rec_category_keyboards")],
        [InlineKeyboardButton("üñ± –ú—ã—à–∫–∏", callback_data="rec_category_mice")],
        [InlineKeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏", callback_data="rec_category_headphones")],
        [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rec_skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "2. –ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=reply_markup
    )


def get_recommendations(user_preferences: dict, data: dict, selected_category: str = None) -> list:
    recommendations = []

    weights = {
        'gaming': {'price': 0.3, 'specs': 0.7},
        'work': {'price': 0.5, 'ergonomics': 0.5},
        'budget': {'price': 0.8, 'value': 0.2}
    }

    user_type = user_preferences.get('usage', 'gaming')
    weight = weights.get(user_type, weights['gaming'])

    categories = [selected_category] if selected_category else data.keys()

    for category in categories:
        if category not in data:
            continue

        for brand, products in data[category].items():
            for product_name, product in products.items():
                score = 0

                try:
                    price = float(product['price'].replace('$', ''))
                    price_score = (1 - min(price / 300, 1)) * weight['price']
                    score += price_score
                except:
                    pass

                if 'specs' in product:
                    specs_score = 0
                    specs = product['specs']

                    if category == 'mice':
                        if 'DPI' in specs:
                            try:
                                dpi = int(specs['DPI'].split()[0])
                                specs_score += min(dpi / 16000, 1) * 0.4
                            except:
                                pass
                        if '–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞' in specs:
                            try:
                                polling = int(specs['–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞'].replace('Hz', ''))
                                specs_score += polling / 8000 * 0.3
                            except:
                                pass

                    elif category == 'keyboards':
                        if '–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π' in specs:
                            if '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ' in specs['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower():
                                specs_score += 0.5
                            elif '–æ–ø—Ç–∏—á–µ—Å–∫–∏–µ' in specs['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower():
                                specs_score += 0.7

                    elif category == 'headphones':
                        if '–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω' in specs:
                            try:
                                freq_range = specs['–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω']
                                if 'Hz' in freq_range and 'kHz' in freq_range:
                                    specs_score += 0.4
                            except:
                                pass
                        if '–¢–∏–ø' in specs and specs['–¢–∏–ø'] == '–ù–∞–∫–ª–∞–¥–Ω—ã–µ':
                            specs_score += 0.3

                    score += specs_score * weight.get('specs', 0)

                recommendations.append({
                    'product': product_name,
                    'brand': brand,
                    'category': category,
                    'score': round(score, 2),
                    'price': product['price'],
                    'photo': product.get('photo_url', '')
                })

    return sorted(recommendations, key=lambda x: x['score'], reverse=True)[:3]


async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = load_tech_data()
    preferences = context.user_data.get('preferences', {})

    if query.data.startswith('rec_category_'):
        selected_category = query.data.split('_')[2]
    elif query.data == 'rec_skip':
        selected_category = None
    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        return

    recommendations = get_recommendations(preferences, data, selected_category)

    if not recommendations:
        await query.edit_message_text("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return

    await query.edit_message_text("‚úÖ –í–æ—Ç –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å:")

    for i, item in enumerate(recommendations, 1):
        message = (
            f"üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #{i}\n\n"
            f"üîπ <b>{item['product']}</b> ({item['brand']})\n"
            f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {item['score']}/1.0\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']}\n\n"
        )

        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                                  callback_data=f"model_{item['category']}_{item['brand']}_{item['product']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if item['photo']:
            try:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=item['photo'],
                    caption=message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )


async def start_gaming_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(genre, callback_data=f"gs_genre_{genre_id}")]
        for genre_id, genre in GAMING_GENRES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π –∏–≥—Ä–æ–≤–æ–π –∂–∞–Ω—Ä:",
        reply_markup=reply_markup
    )


async def ask_hand_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    genre = query.data.split('_')[-1]
    context.user_data['gaming_setup'] = {'genre': genre}

    keyboard = [
        [InlineKeyboardButton(size, callback_data=f"gs_hand_{size_id}")]
        for size_id, size in HAND_SIZES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚úã –ö–∞–∫–æ–π —É –≤–∞—Å —Ä–∞–∑–º–µ—Ä —Ä—É–∫–∏? (–∏–∑–º–µ—Ä—å—Ç–µ –æ—Ç –∫–æ–Ω—á–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∞–ª—å—Ü–∞ –¥–æ –∑–∞–ø—è—Å—Ç—å—è):",
        reply_markup=reply_markup
    )


async def ask_switch_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    hand_size = query.data.split('_')[-1]
    context.user_data['gaming_setup']['hand_size'] = hand_size

    keyboard = [
        [InlineKeyboardButton(switch_type, callback_data=f"gs_switch_{switch_id}")]
        for switch_id, switch_type in SWITCH_TYPES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚å®Ô∏è –ö–∞–∫–æ–π —Ç–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        reply_markup=reply_markup
    )


async def generate_gaming_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    switch_type = query.data.split('_')[-1]
    context.user_data['gaming_setup']['switch_type'] = switch_type

    setup_data = context.user_data['gaming_setup']
    genre = setup_data['genre']
    hand_size = setup_data['hand_size']

    data = load_tech_data()

    # –í—ã–±–∏—Ä–∞–µ–º –º—ã—à—å –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ä—É–∫–∏
    mouse_recommendations = []
    if 'mice' in data:
        for brand, mice in data['mice'].items():
            for model, specs in mice.items():
                if 'specs' in specs and '–†–∞–∑–º–µ—Ä' in specs['specs']:
                    size_match = False
                    if hand_size == 'small' and '–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è' in specs['specs']['–†–∞–∑–º–µ—Ä'].lower():
                        size_match = True
                    elif hand_size == 'medium' and '—Å—Ä–µ–¥–Ω—è—è' in specs['specs']['–†–∞–∑–º–µ—Ä'].lower():
                        size_match = True
                    elif hand_size == 'large' and '–±–æ–ª—å—à–∞—è' in specs['specs']['–†–∞–∑–º–µ—Ä'].lower():
                        size_match = True

                    if size_match:
                        mouse_recommendations.append({
                            'brand': brand,
                            'model': model,
                            'specs': specs
                        })

    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ç–∏–ø—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    keyboard_recommendations = []
    if 'keyboards' in data:
        for brand, keyboards in data['keyboards'].items():
            for model, specs in keyboards.items():
                if 'specs' in specs and '–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π' in specs['specs']:
                    switch_match = False
                    if switch_type == 'linear' and (
                            '–∫—Ä–∞—Å–Ω—ã–µ' in specs['specs']['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower() or '–ª–∏–Ω–µ–π–Ω—ã–µ' in specs['specs'][
                        '–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower()):
                        switch_match = True
                    elif switch_type == 'tactile' and (
                            '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ' in specs['specs']['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower() or '—Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ' in
                            specs['specs']['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower()):
                        switch_match = True
                    elif switch_type == 'clicky' and (
                            '—Å–∏–Ω–∏–µ' in specs['specs']['–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower() or '–∫–ª–∏–∫–∞—é—â–∏–µ' in specs['specs'][
                        '–¢–∏–ø –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π'].lower()):
                        switch_match = True

                    if switch_match:
                        keyboard_recommendations.append({
                            'brand': brand,
                            'model': model,
                            'specs': specs
                        })

    # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—É—à–Ω–∏–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
    headphones_recommendations = []
    if 'headphones' in data:
        for brand, headphones in data['headphones'].items():
            for model, specs in headphones.items():
                headphones_recommendations.append({
                    'brand': brand,
                    'model': model,
                    'specs': specs
                })

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ)
    mouse = mouse_recommendations[0] if mouse_recommendations else None
    keyboard = keyboard_recommendations[0] if keyboard_recommendations else None
    headphones = headphones_recommendations[0] if headphones_recommendations else None

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    message = "üéÆ <b>–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–µ—Ç–∞–ø:</b>\n\n"

    if mouse:
        message += f"üñ± <b>–ú—ã—à—å:</b> {mouse['brand']} {mouse['model']}\n"
        message += f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {mouse['specs'].get('description', '')}\n"
        message += f"   –¶–µ–Ω–∞: {mouse['specs'].get('price', '?')}\n\n"

    if keyboard:
        message += f"‚å®Ô∏è <b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:</b> {keyboard['brand']} {keyboard['model']}\n"
        message += f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {keyboard['specs'].get('description', '')}\n"
        message += f"   –¶–µ–Ω–∞: {keyboard['specs'].get('price', '?')}\n\n"

    if headphones:
        message += f"üéß <b>–ù–∞—É—à–Ω–∏–∫–∏:</b> {headphones['brand']} {headphones['model']}\n"
        message += f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {headphones['specs'].get('description', '')}\n"
        message += f"   –¶–µ–Ω–∞: {headphones['specs'].get('price', '?')}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç
    advice = GAMING_SETUP_ADVICE.get(genre, GAMING_SETUP_ADVICE['shooter'])
    message += "üí° <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç:</b>\n"
    message += f"‚Ä¢ –ú—ã—à—å: {advice['mouse']}\n"
    message += f"‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {advice['keyboard']}\n"
    message += f"‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏: {advice['headphones']}\n\n"
    message += f"üòÑ <i>{advice['meme']}</i>"

    keyboard = [
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_categories")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, parse_mode="HTML", reply_markup=reply_markup)


def main():
    application = Application.builder().token("7720478089:AAFNkuWjyNnOUFh8YA5XVgYo6VWlAV_vGmI").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_category, pattern=r"^(category_|back_to_categories)"))
    application.add_handler(CallbackQueryHandler(handle_brand, pattern=r"^(brand_|back_to_brands)"))
    application.add_handler(CallbackQueryHandler(handle_model, pattern=r"^model_"))
    application.add_handler(CallbackQueryHandler(ask_preferences, pattern=r"^get_recommendations"))
    application.add_handler(CallbackQueryHandler(handle_preferences, pattern=r"^pref_"))
    application.add_handler(CallbackQueryHandler(show_recommendations, pattern=r"^rec_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ç–∞–ø–∞
    application.add_handler(CallbackQueryHandler(start_gaming_setup, pattern=r"^gaming_setup_start$"))
    application.add_handler(CallbackQueryHandler(ask_hand_size, pattern=r"^gs_genre_"))
    application.add_handler(CallbackQueryHandler(ask_switch_type, pattern=r"^gs_hand_"))
    application.add_handler(CallbackQueryHandler(generate_gaming_setup, pattern=r"^gs_switch_"))

    application.run_polling()


if __name__ == "__main__":
    main()